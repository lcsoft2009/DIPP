package com.liangchu;


import hipi.image.FloatImage;
import hipi.image.ImageHeader;
import hipi.imagebundle.mapreduce.ImageBundleInputFormat;
import hipi.imagebundle.mapreduce.output.BinaryOutputFormat;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BooleanWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
public class Im2Gray extends Configured implements Tool{

	public static class MyMapper extends Mapper<ImageHeader, FloatImage, NullWritable, FloatImage>
	{
		
		private Path path;
		private FileSystem fileSystem;
		private Configuration conf;
		public void setup(Context jc) throws IOException
		{
			conf = jc.getConfiguration();
			fileSystem = FileSystem.get(conf);
			path = new Path( conf.get("im2gray.outdir"));
			fileSystem.mkdirs(path);
		}
		public void map(ImageHeader key, FloatImage value, Context context) throws IOException, InterruptedException{
			/*if (value != null) {
				//System.out.println("###########"+value.getWidth());
				//System.out.println("###########"+value.getHeight());
				
				//************************************************************************
      //	FloatImage gray = value.convert(FloatImage.RGB2GRAY);
   //   	FloatImage gray = value.crop(0, 0, 100, 100);
				float s=0.9f;
				value.add(s);
		//		System.out.println("###########begin convert");
		//		FloatImage gray=value.convert(FloatImage.RGB2GRAY);
		//	System.out.println("###########end convert");
				FloatImage gray=value;
				//note: images may have the same hash code
				context.write(new BooleanWritable(true), new LongWritable(gray.hashCode()));
				
				//If we later decide we want to output the image
				
				ImageEncoder encoder = JPEGImageUtil.getInstance();
				
			//	a neccessary step to avoid files with duplicate hash values
				Path outpath = new Path(path + "/" + gray.hashCode() + ".jpg");
				while(fileSystem.exists(outpath)){
					String temp = outpath.toString();
					outpath = new Path(temp.substring(0,temp.lastIndexOf('.')) + "1.jpg"); 
				}
				FSDataOutputStream os = fileSystem.create(outpath);
				encoder.encodeImage(gray, key, os);

				os.flush();
				os.close();
			
				 
			}
			else
				context.write(new BooleanWritable(false), new LongWritable(0));*/
			
			if (value != null) {
				FloatImage gray = value.convert(FloatImage.RGB2GRAY);
				context.write(NullWritable.get(), gray);
			}
		}
	}
	public static class MyReducer extends Reducer<NullWritable, FloatImage, IntWritable, FloatImage> {
		// Just the basic indentity reducer... no extra functionality needed at this time
		public void reduce(NullWritable key, Iterable<FloatImage> values, Context context)
		throws IOException, InterruptedException
		{

			FloatImage mean = new FloatImage(2592, 1944, 1);
			int num_pics = 0;
			for (FloatImage val : values) {
				mean.add(val);
				float[] pels_s = val.getData();
				float[] pels = val.getData();
				int x=val.getWidth();
				int y=val.getHeight();
				int b=val.getBands();
				for (int i = 0; i <  x* y * b; i++,x++,y++)
					pels_s[i]+=pels[i];
				num_pics++;
			}
			System.out.println("pic="+num_pics);
			float scale = 1.0f/num_pics;
			mean.scale(scale);
			System.out.println("Scale: " + scale);
			
			context.write(new IntWritable(0), mean);
			/*
			System.out.println("REDUCING");
			for (FloatImage temp_hash : values) {
				{	    
					context.write(new IntWritable(0), temp_hash);
				}

			}*/
		}
	}
		public int run(String[] args) throws Exception
		{	

			// Read in the configurations
			if (args.length < 2)
			{
				System.out.println("Usage: im2gray <inputdir> <outputdir> <input type: hib, har, sequence, small_files>");
				System.exit(0);
			}


			// Setup configuration
			Configuration conf = new Configuration();

			// set the dir to output the jpegs to
			String outputPath = args[1];
			conf.setStrings("im2gray.outdir", outputPath);

			Job job = new Job(conf, "im2gray");
			job.setJarByClass(Im2Gray.class);
			job.setMapperClass(MyMapper.class);
			job.setReducerClass(MyReducer.class);

			// Set formats
			// Set formats
			job.setOutputKeyClass(IntWritable.class);
			job.setOutputValueClass(FloatImage.class);       
			job.setOutputFormatClass(BinaryOutputFormat.class);
			job.setMapOutputKeyClass(NullWritable.class);
			job.setMapOutputValueClass(FloatImage.class);     

			// Set out/in paths
			removeDir("/virginia/uvagfx/cms2vp/out", conf);
			FileOutputFormat.setOutputPath(job, new Path("/virginia/uvagfx/cms2vp/out"));

			/*
			Path qualifiedPath = new Path("har://", new Path(args[0]).toUri().getPath());
			JPEGFileInputFormat.addInputPath(job, qualifiedPath);	
			*/
			
			FileInputFormat.addInputPath(job, new Path(args[0]));
			
				job.setInputFormatClass(ImageBundleInputFormat.class);

			//conf.set("mapred.job.tracker", "local");
			job.setNumReduceTasks(1);
			System.exit(job.waitForCompletion(true) ? 0 : 1);
			return 0;
		}
		public static void removeDir(String path, Configuration conf) throws IOException {
			Path output_path = new Path(path);

			FileSystem fs = FileSystem.get(conf);

			if (fs.exists(output_path)) {
				fs.delete(output_path, true);
			}
		}
		public static void main(String[] args) throws Exception {
			int res = ToolRunner.run(new Im2Gray(), args);
			System.exit(res);
		}
	}
