package com.liangchu;


import hipi.image.FloatImage;
import hipi.image.ImageHeader;
import hipi.imagebundle.mapreduce.ImageBundleInputFormat;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import com.liangchu.hbase.HBaseDB;
import com.liangchu.image.FqImage;
public class ImageDBHbase extends Configured implements Tool{

	public static class MyMapper extends Mapper<ImageHeader, FloatImage, IntWritable, Text>
	{
		
		private Path path;
		private FileSystem fileSystem;
		private Configuration conf;
		private	static String tablename = "imageDB";
	//	private  String[] familys = {"id","hsv"};

		public void setup(Context jc) throws IOException
		{
			conf = jc.getConfiguration();
			fileSystem = FileSystem.get(conf);
			path = new Path( conf.get("imageDBSearch.outdir"));
			fileSystem.mkdirs(path);
		}
		public void map(ImageHeader key, FloatImage value, Context context) throws IOException, InterruptedException{
			if (value != null) {
	
				
				BufferedImage bufferedImage = new BufferedImage(value.getWidth()/10, value.getHeight()/10, BufferedImage.TYPE_INT_RGB);
				float[] data = value.getData();
				int[] rgb = new int[value.getWidth() * value.getHeight()];
				for (int i = 0; i < value.getWidth()* value.getHeight(); i++)
				{
					int r = Math.min(Math.max((int)(data[i * 3] * 255), 0), 255);
					int g = Math.min(Math.max((int)(data[i * 3 + 1] * 255), 0), 255);
					int b = Math.min(Math.max((int)(data[i * 3 + 2] * 255), 0), 255);
					rgb[i] = r << 16 | g << 8 | b;
				}
				bufferedImage.setRGB(0, 0, value.getWidth()/10, value.getHeight()/10, rgb, 0, value.getWidth()/10);
				FqImage imh	=	new FqImage(bufferedImage);
				imh.setColorJu();
				String colorJuH1 = Double.toString(imh.colorJuH[1]);
				String colorJuH2 = Double.toString(imh.colorJuH[2]);
				String colorJuH3 = Double.toString(imh.colorJuH[3]);
				String colorJuS1 = Double.toString(imh.colorJuS[1]);
				String colorJuS2 = Double.toString(imh.colorJuS[2]);
				String colorJuS3 = Double.toString(imh.colorJuS[3]);
				String colorJuV1 = Double.toString(imh.colorJuV[1]);
				String colorJuV2 = Double.toString(imh.colorJuV[2]);
				String colorJuV3 = Double.toString(imh.colorJuV[3]);
				
				  //add record 
int id=key.hashCode();
	            try {
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","h1",colorJuH1);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","h2",colorJuH2);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","h3",colorJuH3);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","s1",colorJuS1);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","s2",colorJuS1);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","s3",colorJuS3);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","v1",colorJuV1);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","v2",colorJuV2);
		            HBaseDB.addRecord(tablename,String.valueOf(id),"hsv","v3",colorJuV3);
		       //     System.out.println("===========show all record========");
		        //    HBaseDB.getAllRecord(tablename);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
				
				context.write(new IntWritable(0), new Text(" "+colorJuH1+" "+colorJuH2+" "+colorJuH3+" "+colorJuS1+" "+colorJuS2+" "+colorJuS3+" "+colorJuV1+" "+colorJuV2+" "+colorJuV3));
			}
		}
	}
	public static class MyReducer extends Reducer<IntWritable, Text, IntWritable, Text> {
		// Just the basic indentity reducer... no extra functionality needed at this time
		private FileSystem fileSystem;
		private Path path;
		private ImageHeader head;
		private Configuration conf;

		public void setup(Context jc) throws IOException
		{
			conf = jc.getConfiguration();
			fileSystem = FileSystem.get(conf);
			path = new Path( conf.get("imageDBSearch.outdir"));
			fileSystem.mkdirs(path);

			//int id=value.hashCode();
           
            	
		}
		
		public void reduce(IntWritable key, Iterable<Text> values, Context context)
		throws IOException, InterruptedException
		{
			for (Text value : values) {
				context.write(key, value);
			}
		}
		
	}
		public int run(String[] args) throws Exception
		{	
				String tablename = "colorJu";
			  String[] familys = {"id","hsv"};
            HBaseDB.creatTable(tablename, familys);
			// Read in the configurations
			if (args.length < 2)
			{
				System.out.println("Usage: im2gray <inputdir> <outputdir> <input type: hib, har, sequence, small_files>");
				System.exit(0);
			}
			
	            
     
			// Setup configuration
			Configuration conf = new Configuration();
             
			// set the dir to output the jpegs to
			String inputPath = args[0];
			String outputPath = args[1];
			
			conf.setStrings("imageDBSearch.outdir", outputPath);

			
			Job job = new Job(conf, "imageDBSearch");
			
			
			job.setJarByClass(ImageDBHbase.class);
			job.setMapperClass(MyMapper.class);
			job.setReducerClass(MyReducer.class);

			// Set formats     
			job.setOutputKeyClass(IntWritable.class);
			job.setOutputValueClass(Text.class);
			job.setInputFormatClass(ImageBundleInputFormat.class);
			// Set out/in paths

			FileOutputFormat.setOutputPath(job, new Path(outputPath));
			FileInputFormat.setInputPaths(job, new Path(inputPath));

			job.setNumReduceTasks(1);
			System.exit(job.waitForCompletion(true) ? 0 : 1);
			return 0;
		}
		public static void removeDir(String path, Configuration conf) throws IOException {
			Path output_path = new Path(path);

			FileSystem fs = FileSystem.get(conf);

			if (fs.exists(output_path)) {
				fs.delete(output_path, true);
			}
		}
		public static void main(String[] args) throws Exception {
			String tablename = "colorJu";
			  String[] familys = {"id", "hsv"};
			 try {
	            	
	            	HBaseDB.creatTable(tablename, familys);
	            }
	           catch(Exception e){}
			int res = ToolRunner.run(new ImageDBHbase(), args);
			System.exit(res);
		}
	}
